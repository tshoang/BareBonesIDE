/*
 * generated by Xtext 2.27.0
 */
grammar InternalBareBones;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.java.barebones2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.java.barebones2.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.java.barebones2.services.BareBonesGrammarAccess;

}

@parser::members {

 	private BareBonesGrammarAccess grammarAccess;

    public InternalBareBonesParser(TokenStream input, BareBonesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected BareBonesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"ac.soton.java.barebones2.BareBones.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getClearParserRuleCall_0());
		}
		this_Clear_0=ruleClear
		{
			$current = $this_Clear_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIncrementParserRuleCall_1());
		}
		this_Increment_1=ruleIncrement
		{
			$current = $this_Increment_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDecrementParserRuleCall_2());
		}
		this_Decrement_2=ruleDecrement
		{
			$current = $this_Decrement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileParserRuleCall_3());
		}
		this_While_3=ruleWhile
		{
			$current = $this_While_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getOutVariableParserRuleCall_4());
		}
		this_OutVariable_4=ruleOutVariable
		{
			$current = $this_OutVariable_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getOutStringParserRuleCall_5());
		}
		this_OutString_5=ruleOutString
		{
			$current = $this_OutString_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getInParserRuleCall_6());
		}
		this_In_6=ruleIn
		{
			$current = $this_In_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClear
entryRuleClear returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClearRule()); }
	iv_ruleClear=ruleClear
	{ $current=$iv_ruleClear.current; }
	EOF;

// Rule Clear
ruleClear returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClearAccess().getClearAction_0(),
					$current);
			}
		)
		otherlv_1='clear'
		{
			newLeafNode(otherlv_1, grammarAccess.getClearAccess().getClearKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClearAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClearRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleIncrement
entryRuleIncrement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncrementRule()); }
	iv_ruleIncrement=ruleIncrement
	{ $current=$iv_ruleIncrement.current; }
	EOF;

// Rule Increment
ruleIncrement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIncrementAccess().getIncrementAction_0(),
					$current);
			}
		)
		otherlv_1='incr'
		{
			newLeafNode(otherlv_1, grammarAccess.getIncrementAccess().getIncrKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getIncrementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIncrementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleDecrement
entryRuleDecrement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecrementRule()); }
	iv_ruleDecrement=ruleDecrement
	{ $current=$iv_ruleDecrement.current; }
	EOF;

// Rule Decrement
ruleDecrement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecrementAccess().getDecrementAction_0(),
					$current);
			}
		)
		otherlv_1='decr'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecrementAccess().getDecrKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDecrementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecrementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileAccess().getWhileAction_0(),
					$current);
			}
		)
		otherlv_1='while'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getWhileKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getConditionFormulaParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"ac.soton.java.barebones2.BareBones.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='do'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getDoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getStatementsStatementParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"ac.soton.java.barebones2.BareBones.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getWhileAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleOutVariable
entryRuleOutVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutVariableRule()); }
	iv_ruleOutVariable=ruleOutVariable
	{ $current=$iv_ruleOutVariable.current; }
	EOF;

// Rule OutVariable
ruleOutVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutVariableAccess().getOutVariableAction_0(),
					$current);
			}
		)
		otherlv_1='out'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutVariableAccess().getOutKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutVariableAccess().getFormulaFormulaParserRuleCall_2_0());
				}
				lv_formula_2_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutVariableRule());
					}
					set(
						$current,
						"formula",
						lv_formula_2_0,
						"ac.soton.java.barebones2.BareBones.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOutString
entryRuleOutString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutStringRule()); }
	iv_ruleOutString=ruleOutString
	{ $current=$iv_ruleOutString.current; }
	EOF;

// Rule OutString
ruleOutString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutStringAccess().getOutStringAction_0(),
					$current);
			}
		)
		otherlv_1='out'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutStringAccess().getOutKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getOutStringAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutStringRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleIn
entryRuleIn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInRule()); }
	iv_ruleIn=ruleIn
	{ $current=$iv_ruleIn.current; }
	EOF;

// Rule In
ruleIn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInAccess().getInAction_0(),
					$current);
			}
		)
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getInAccess().getInKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getInAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFormulaAccess().getPredicateParserRuleCall());
	}
	this_Predicate_0=rulePredicate
	{
		$current = $this_Predicate_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPredicateAccess().getAssociativePredicateParserRuleCall());
	}
	this_AssociativePredicate_0=ruleAssociativePredicate
	{
		$current = $this_AssociativePredicate_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAssociativePredicate
entryRuleAssociativePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociativePredicateRule()); }
	iv_ruleAssociativePredicate=ruleAssociativePredicate
	{ $current=$iv_ruleAssociativePredicate.current; }
	EOF;

// Rule AssociativePredicate
ruleAssociativePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssociativePredicateAccess().getPrimaryPredicateParserRuleCall_0());
		}
		this_PrimaryPredicate_0=rulePrimaryPredicate
		{
			$current = $this_PrimaryPredicate_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAssociativePredicateAccess().getAssociativePredicateLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_tag_2_1='&&'
						{
							newLeafNode(lv_tag_2_1, grammarAccess.getAssociativePredicateAccess().getTagAmpersandAmpersandKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssociativePredicateRule());
							}
							setWithLastConsumed($current, "tag", lv_tag_2_1, null);
						}
						    |
						lv_tag_2_2='||'
						{
							newLeafNode(lv_tag_2_2, grammarAccess.getAssociativePredicateAccess().getTagVerticalLineVerticalLineKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssociativePredicateRule());
							}
							setWithLastConsumed($current, "tag", lv_tag_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssociativePredicateAccess().getRightPrimaryPredicateParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryPredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssociativePredicateRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ac.soton.java.barebones2.BareBones.PrimaryPredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryPredicate
entryRulePrimaryPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryPredicateRule()); }
	iv_rulePrimaryPredicate=rulePrimaryPredicate
	{ $current=$iv_rulePrimaryPredicate.current; }
	EOF;

// Rule PrimaryPredicate
rulePrimaryPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPrimaryPredicateAccess().getRelationalPredicateParserRuleCall());
	}
	this_RelationalPredicate_0=ruleRelationalPredicate
	{
		$current = $this_RelationalPredicate_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleRelationalPredicate
entryRuleRelationalPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalPredicateRule()); }
	iv_ruleRelationalPredicate=ruleRelationalPredicate
	{ $current=$iv_ruleRelationalPredicate.current; }
	EOF;

// Rule RelationalPredicate
ruleRelationalPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationalPredicateAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current = $this_Expression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelationalPredicateAccess().getRelationalPredicateLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_tag_2_0='='
					{
						newLeafNode(lv_tag_2_0, grammarAccess.getRelationalPredicateAccess().getTagEqualsSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelationalPredicateRule());
						}
						setWithLastConsumed($current, "tag", lv_tag_2_0, "=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalPredicateAccess().getRightExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalPredicateRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ac.soton.java.barebones2.BareBones.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getAdditionSubtractionParserRuleCall());
	}
	this_AdditionSubtraction_0=ruleAdditionSubtraction
	{
		$current = $this_AdditionSubtraction_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAdditionSubtraction
entryRuleAdditionSubtraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionSubtractionRule()); }
	iv_ruleAdditionSubtraction=ruleAdditionSubtraction
	{ $current=$iv_ruleAdditionSubtraction.current; }
	EOF;

// Rule AdditionSubtraction
ruleAdditionSubtraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionSubtractionAccess().getMultiplicationDivisionParserRuleCall_0());
		}
		this_MultiplicationDivision_0=ruleMultiplicationDivision
		{
			$current = $this_MultiplicationDivision_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionSubtractionAccess().getAdditionSubtractionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_tag_2_1='+'
						{
							newLeafNode(lv_tag_2_1, grammarAccess.getAdditionSubtractionAccess().getTagPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionSubtractionRule());
							}
							setWithLastConsumed($current, "tag", lv_tag_2_1, null);
						}
						    |
						lv_tag_2_2='-'
						{
							newLeafNode(lv_tag_2_2, grammarAccess.getAdditionSubtractionAccess().getTagHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionSubtractionRule());
							}
							setWithLastConsumed($current, "tag", lv_tag_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionSubtractionAccess().getRightMultiplicationDivisionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplicationDivision
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionSubtractionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ac.soton.java.barebones2.BareBones.MultiplicationDivision");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicationDivision
entryRuleMultiplicationDivision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationDivisionRule()); }
	iv_ruleMultiplicationDivision=ruleMultiplicationDivision
	{ $current=$iv_ruleMultiplicationDivision.current; }
	EOF;

// Rule MultiplicationDivision
ruleMultiplicationDivision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationDivisionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationDivisionAccess().getMultiplicationDivisionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_tag_2_1='*'
						{
							newLeafNode(lv_tag_2_1, grammarAccess.getMultiplicationDivisionAccess().getTagAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationDivisionRule());
							}
							setWithLastConsumed($current, "tag", lv_tag_2_1, null);
						}
						    |
						lv_tag_2_2='/'
						{
							newLeafNode(lv_tag_2_2, grammarAccess.getMultiplicationDivisionAccess().getTagSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationDivisionRule());
							}
							setWithLastConsumed($current, "tag", lv_tag_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationDivisionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ac.soton.java.barebones2.BareBones.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFormulaParserRuleCall_0_1());
			}
			this_Formula_1=ruleFormula
			{
				$current = $this_Formula_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralParserRuleCall_1());
		}
		this_NumberLiteral_3=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_2());
		}
		this_Identifier_4=ruleIdentifier
		{
			$current = $this_Identifier_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current; }
	EOF;

// Rule Identifier
ruleIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifierRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
