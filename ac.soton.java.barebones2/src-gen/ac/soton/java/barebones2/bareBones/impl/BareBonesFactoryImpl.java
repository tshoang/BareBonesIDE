/**
 * generated by Xtext 2.27.0
 */
package ac.soton.java.barebones2.bareBones.impl;

import ac.soton.java.barebones2.bareBones.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BareBonesFactoryImpl extends EFactoryImpl implements BareBonesFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BareBonesFactory init()
  {
    try
    {
      BareBonesFactory theBareBonesFactory = (BareBonesFactory)EPackage.Registry.INSTANCE.getEFactory(BareBonesPackage.eNS_URI);
      if (theBareBonesFactory != null)
      {
        return theBareBonesFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BareBonesFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BareBonesFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BareBonesPackage.PROGRAM: return createProgram();
      case BareBonesPackage.STATEMENT: return createStatement();
      case BareBonesPackage.CLEAR: return createClear();
      case BareBonesPackage.INCREMENT: return createIncrement();
      case BareBonesPackage.DECREMENT: return createDecrement();
      case BareBonesPackage.WHILE: return createWhile();
      case BareBonesPackage.OUT_VARIABLE: return createOutVariable();
      case BareBonesPackage.OUT_STRING: return createOutString();
      case BareBonesPackage.IN: return createIn();
      case BareBonesPackage.FORMULA: return createFormula();
      case BareBonesPackage.NUMBER_LITERAL: return createNumberLiteral();
      case BareBonesPackage.IDENTIFIER: return createIdentifier();
      case BareBonesPackage.ASSOCIATIVE_PREDICATE: return createAssociativePredicate();
      case BareBonesPackage.RELATIONAL_PREDICATE: return createRelationalPredicate();
      case BareBonesPackage.ADDITION_SUBTRACTION: return createAdditionSubtraction();
      case BareBonesPackage.MULTIPLICATION_DIVISION: return createMultiplicationDivision();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clear createClear()
  {
    ClearImpl clear = new ClearImpl();
    return clear;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Increment createIncrement()
  {
    IncrementImpl increment = new IncrementImpl();
    return increment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decrement createDecrement()
  {
    DecrementImpl decrement = new DecrementImpl();
    return decrement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public While createWhile()
  {
    WhileImpl while_ = new WhileImpl();
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutVariable createOutVariable()
  {
    OutVariableImpl outVariable = new OutVariableImpl();
    return outVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutString createOutString()
  {
    OutStringImpl outString = new OutStringImpl();
    return outString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public In createIn()
  {
    InImpl in = new InImpl();
    return in;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formula createFormula()
  {
    FormulaImpl formula = new FormulaImpl();
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Identifier createIdentifier()
  {
    IdentifierImpl identifier = new IdentifierImpl();
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssociativePredicate createAssociativePredicate()
  {
    AssociativePredicateImpl associativePredicate = new AssociativePredicateImpl();
    return associativePredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalPredicate createRelationalPredicate()
  {
    RelationalPredicateImpl relationalPredicate = new RelationalPredicateImpl();
    return relationalPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditionSubtraction createAdditionSubtraction()
  {
    AdditionSubtractionImpl additionSubtraction = new AdditionSubtractionImpl();
    return additionSubtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicationDivision createMultiplicationDivision()
  {
    MultiplicationDivisionImpl multiplicationDivision = new MultiplicationDivisionImpl();
    return multiplicationDivision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BareBonesPackage getBareBonesPackage()
  {
    return (BareBonesPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BareBonesPackage getPackage()
  {
    return BareBonesPackage.eINSTANCE;
  }

} //BareBonesFactoryImpl
