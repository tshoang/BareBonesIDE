/*
 * generated by Xtext 2.27.0
 */
package ac.soton.java.barebones2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BareBonesGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Program");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Program:
		//    statements += Statement+;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClearParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncrementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecrementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOutVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOutStringParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Statement:
		//    Clear | Increment | Decrement | While | OutVariable | OutString | In
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Clear | Increment | Decrement | While | OutVariable | OutString | In
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Clear
		public RuleCall getClearParserRuleCall_0() { return cClearParserRuleCall_0; }
		
		//Increment
		public RuleCall getIncrementParserRuleCall_1() { return cIncrementParserRuleCall_1; }
		
		//Decrement
		public RuleCall getDecrementParserRuleCall_2() { return cDecrementParserRuleCall_2; }
		
		//While
		public RuleCall getWhileParserRuleCall_3() { return cWhileParserRuleCall_3; }
		
		//OutVariable
		public RuleCall getOutVariableParserRuleCall_4() { return cOutVariableParserRuleCall_4; }
		
		//OutString
		public RuleCall getOutStringParserRuleCall_5() { return cOutStringParserRuleCall_5; }
		
		//In
		public RuleCall getInParserRuleCall_6() { return cInParserRuleCall_6; }
	}
	public class ClearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Clear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClearAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClearKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Clear:
		//    {Clear}
		//    'clear' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Clear}
		//'clear' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Clear}
		public Action getClearAction_0() { return cClearAction_0; }
		
		//'clear'
		public Keyword getClearKeyword_1() { return cClearKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class IncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Increment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncrementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIncrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Increment:
		//    {Increment}
		//    'incr' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Increment}
		//'incr' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Increment}
		public Action getIncrementAction_0() { return cIncrementAction_0; }
		
		//'incr'
		public Keyword getIncrKeyword_1() { return cIncrKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class DecrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Decrement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecrementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Decrement:
		//    {Decrement}
		//    'decr' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Decrement}
		//'decr' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Decrement}
		public Action getDecrementAction_0() { return cDecrementAction_0; }
		
		//'decr'
		public Keyword getDecrKeyword_1() { return cDecrKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionFormulaParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//While:
		//    {While}
		//    'while' condition=Formula 'do'
		//        statements += Statement+
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{While}
		//'while' condition=Formula 'do'
		//    statements += Statement+
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{While}
		public Action getWhileAction_0() { return cWhileAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//condition=Formula
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Formula
		public RuleCall getConditionFormulaParserRuleCall_2_0() { return cConditionFormulaParserRuleCall_2_0; }
		
		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//statements += Statement+
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class OutVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.OutVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormulaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormulaFormulaParserRuleCall_2_0 = (RuleCall)cFormulaAssignment_2.eContents().get(0);
		
		//OutVariable:
		//    {OutVariable}
		//    'out' formula=Formula
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutVariable}
		//'out' formula=Formula
		public Group getGroup() { return cGroup; }
		
		//{OutVariable}
		public Action getOutVariableAction_0() { return cOutVariableAction_0; }
		
		//'out'
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
		
		//formula=Formula
		public Assignment getFormulaAssignment_2() { return cFormulaAssignment_2; }
		
		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_2_0() { return cFormulaFormulaParserRuleCall_2_0; }
	}
	public class OutStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.OutString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OutString:
		//    {OutString}
		//    'out' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutString}
		//'out' name=STRING
		public Group getGroup() { return cGroup; }
		
		//{OutString}
		public Action getOutStringAction_0() { return cOutStringAction_0; }
		
		//'out'
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class InElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.In");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//In:
		//    {In}
		//    'in' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{In}
		//'in' name=ID
		public Group getGroup() { return cGroup; }
		
		//{In}
		public Action getInAction_0() { return cInAction_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Formula");
		private final RuleCall cPredicateParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*
		// * Defining Formula
		// */
		//Formula:
		//    Predicate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall() { return cPredicateParserRuleCall; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Predicate");
		private final RuleCall cAssociativePredicateParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Predicate returns Formula:
		//    AssociativePredicate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AssociativePredicate
		public RuleCall getAssociativePredicateParserRuleCall() { return cAssociativePredicateParserRuleCall; }
	}
	public class AssociativePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.AssociativePredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryPredicateParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssociativePredicateLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTagAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cTagAlternatives_1_1_0 = (Alternatives)cTagAssignment_1_1.eContents().get(0);
		private final Keyword cTagAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cTagAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTagVerticalLineVerticalLineKeyword_1_1_0_1 = (Keyword)cTagAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryPredicateParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AssociativePredicate returns Formula:
		//    PrimaryPredicate ({AssociativePredicate.left=current} tag=('&&' | '||') right=PrimaryPredicate)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryPredicate ({AssociativePredicate.left=current} tag=('&&' | '||') right=PrimaryPredicate)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryPredicate
		public RuleCall getPrimaryPredicateParserRuleCall_0() { return cPrimaryPredicateParserRuleCall_0; }
		
		//({AssociativePredicate.left=current} tag=('&&' | '||') right=PrimaryPredicate)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AssociativePredicate.left=current}
		public Action getAssociativePredicateLeftAction_1_0() { return cAssociativePredicateLeftAction_1_0; }
		
		//tag=('&&' | '||')
		public Assignment getTagAssignment_1_1() { return cTagAssignment_1_1; }
		
		//('&&' | '||')
		public Alternatives getTagAlternatives_1_1_0() { return cTagAlternatives_1_1_0; }
		
		//'&&'
		public Keyword getTagAmpersandAmpersandKeyword_1_1_0_0() { return cTagAmpersandAmpersandKeyword_1_1_0_0; }
		
		//'||'
		public Keyword getTagVerticalLineVerticalLineKeyword_1_1_0_1() { return cTagVerticalLineVerticalLineKeyword_1_1_0_1; }
		
		//right=PrimaryPredicate
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryPredicate
		public RuleCall getRightPrimaryPredicateParserRuleCall_1_2_0() { return cRightPrimaryPredicateParserRuleCall_1_2_0; }
	}
	public class PrimaryPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.PrimaryPredicate");
		private final RuleCall cRelationalPredicateParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PrimaryPredicate returns Formula:
		//    RelationalPredicate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalPredicate
		public RuleCall getRelationalPredicateParserRuleCall() { return cRelationalPredicateParserRuleCall; }
	}
	public class RelationalPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.RelationalPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalPredicateLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTagAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTagEqualsSignKeyword_1_1_0 = (Keyword)cTagAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalPredicate returns Formula:
		//    Expression ({RelationalPredicate.left = current} tag=('=') right=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ({RelationalPredicate.left = current} tag=('=') right=Expression)?
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//({RelationalPredicate.left = current} tag=('=') right=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationalPredicate.left = current}
		public Action getRelationalPredicateLeftAction_1_0() { return cRelationalPredicateLeftAction_1_0; }
		
		//tag=('=')
		public Assignment getTagAssignment_1_1() { return cTagAssignment_1_1; }
		
		//('=')
		public Keyword getTagEqualsSignKeyword_1_1_0() { return cTagEqualsSignKeyword_1_1_0; }
		
		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Expression");
		private final RuleCall cAdditionSubtractionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns Formula:
		//    AdditionSubtraction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionSubtraction
		public RuleCall getAdditionSubtractionParserRuleCall() { return cAdditionSubtractionParserRuleCall; }
	}
	public class AdditionSubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.AdditionSubtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionSubtractionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTagAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cTagAlternatives_1_1_0 = (Alternatives)cTagAssignment_1_1.eContents().get(0);
		private final Keyword cTagPlusSignKeyword_1_1_0_0 = (Keyword)cTagAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTagHyphenMinusKeyword_1_1_0_1 = (Keyword)cTagAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditionSubtraction returns Formula:
		//    (MultiplicationDivision) ({AdditionSubtraction.left=current} tag=('+' | '-') right=(MultiplicationDivision))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(MultiplicationDivision) ({AdditionSubtraction.left=current} tag=('+' | '-') right=(MultiplicationDivision))*
		public Group getGroup() { return cGroup; }
		
		//(MultiplicationDivision)
		public RuleCall getMultiplicationDivisionParserRuleCall_0() { return cMultiplicationDivisionParserRuleCall_0; }
		
		//({AdditionSubtraction.left=current} tag=('+' | '-') right=(MultiplicationDivision))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditionSubtraction.left=current}
		public Action getAdditionSubtractionLeftAction_1_0() { return cAdditionSubtractionLeftAction_1_0; }
		
		//tag=('+' | '-')
		public Assignment getTagAssignment_1_1() { return cTagAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getTagAlternatives_1_1_0() { return cTagAlternatives_1_1_0; }
		
		//'+'
		public Keyword getTagPlusSignKeyword_1_1_0_0() { return cTagPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getTagHyphenMinusKeyword_1_1_0_1() { return cTagHyphenMinusKeyword_1_1_0_1; }
		
		//right=(MultiplicationDivision)
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//(MultiplicationDivision)
		public RuleCall getRightMultiplicationDivisionParserRuleCall_1_2_0() { return cRightMultiplicationDivisionParserRuleCall_1_2_0; }
	}
	public class MultiplicationDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.MultiplicationDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationDivisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTagAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cTagAlternatives_1_1_0 = (Alternatives)cTagAssignment_1_1.eContents().get(0);
		private final Keyword cTagAsteriskKeyword_1_1_0_0 = (Keyword)cTagAlternatives_1_1_0.eContents().get(0);
		private final Keyword cTagSolidusKeyword_1_1_0_1 = (Keyword)cTagAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicationDivision returns Formula:
		//    PrimaryExpression ({MultiplicationDivision.left=current} tag=('*' | '/') right=PrimaryExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({MultiplicationDivision.left=current} tag=('*' | '/') right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({MultiplicationDivision.left=current} tag=('*' | '/') right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicationDivision.left=current}
		public Action getMultiplicationDivisionLeftAction_1_0() { return cMultiplicationDivisionLeftAction_1_0; }
		
		//tag=('*' | '/')
		public Assignment getTagAssignment_1_1() { return cTagAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getTagAlternatives_1_1_0() { return cTagAlternatives_1_1_0; }
		
		//'*'
		public Keyword getTagAsteriskKeyword_1_1_0_0() { return cTagAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getTagSolidusKeyword_1_1_0_1() { return cTagSolidusKeyword_1_1_0_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cFormulaParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryExpression returns Formula:
		//    '(' Formula ')' |
		//    NumberLiteral |
		//    Identifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Formula ')' |
		//NumberLiteral |
		//Identifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Formula ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Formula
		public RuleCall getFormulaParserRuleCall_0_1() { return cFormulaParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_2() { return cIdentifierParserRuleCall_2; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.java.barebones2.BareBones.Identifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Identifier:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final ClearElements pClear;
	private final IncrementElements pIncrement;
	private final DecrementElements pDecrement;
	private final WhileElements pWhile;
	private final OutVariableElements pOutVariable;
	private final OutStringElements pOutString;
	private final InElements pIn;
	private final FormulaElements pFormula;
	private final PredicateElements pPredicate;
	private final AssociativePredicateElements pAssociativePredicate;
	private final PrimaryPredicateElements pPrimaryPredicate;
	private final RelationalPredicateElements pRelationalPredicate;
	private final ExpressionElements pExpression;
	private final AdditionSubtractionElements pAdditionSubtraction;
	private final MultiplicationDivisionElements pMultiplicationDivision;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final NumberLiteralElements pNumberLiteral;
	private final IdentifierElements pIdentifier;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BareBonesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pClear = new ClearElements();
		this.pIncrement = new IncrementElements();
		this.pDecrement = new DecrementElements();
		this.pWhile = new WhileElements();
		this.pOutVariable = new OutVariableElements();
		this.pOutString = new OutStringElements();
		this.pIn = new InElements();
		this.pFormula = new FormulaElements();
		this.pPredicate = new PredicateElements();
		this.pAssociativePredicate = new AssociativePredicateElements();
		this.pPrimaryPredicate = new PrimaryPredicateElements();
		this.pRelationalPredicate = new RelationalPredicateElements();
		this.pExpression = new ExpressionElements();
		this.pAdditionSubtraction = new AdditionSubtractionElements();
		this.pMultiplicationDivision = new MultiplicationDivisionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pIdentifier = new IdentifierElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.java.barebones2.BareBones".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    statements += Statement+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement:
	//    Clear | Increment | Decrement | While | OutVariable | OutString | In
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Clear:
	//    {Clear}
	//    'clear' name=ID
	//;
	public ClearElements getClearAccess() {
		return pClear;
	}
	
	public ParserRule getClearRule() {
		return getClearAccess().getRule();
	}
	
	//Increment:
	//    {Increment}
	//    'incr' name=ID
	//;
	public IncrementElements getIncrementAccess() {
		return pIncrement;
	}
	
	public ParserRule getIncrementRule() {
		return getIncrementAccess().getRule();
	}
	
	//Decrement:
	//    {Decrement}
	//    'decr' name=ID
	//;
	public DecrementElements getDecrementAccess() {
		return pDecrement;
	}
	
	public ParserRule getDecrementRule() {
		return getDecrementAccess().getRule();
	}
	
	//While:
	//    {While}
	//    'while' condition=Formula 'do'
	//        statements += Statement+
	//    'end'
	//;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//OutVariable:
	//    {OutVariable}
	//    'out' formula=Formula
	//;
	public OutVariableElements getOutVariableAccess() {
		return pOutVariable;
	}
	
	public ParserRule getOutVariableRule() {
		return getOutVariableAccess().getRule();
	}
	
	//OutString:
	//    {OutString}
	//    'out' name=STRING
	//;
	public OutStringElements getOutStringAccess() {
		return pOutString;
	}
	
	public ParserRule getOutStringRule() {
		return getOutStringAccess().getRule();
	}
	
	//In:
	//    {In}
	//    'in' name=ID
	//;
	public InElements getInAccess() {
		return pIn;
	}
	
	public ParserRule getInRule() {
		return getInAccess().getRule();
	}
	
	///*
	// * Defining Formula
	// */
	//Formula:
	//    Predicate
	//;
	public FormulaElements getFormulaAccess() {
		return pFormula;
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}
	
	//Predicate returns Formula:
	//    AssociativePredicate
	//;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//AssociativePredicate returns Formula:
	//    PrimaryPredicate ({AssociativePredicate.left=current} tag=('&&' | '||') right=PrimaryPredicate)*
	//;
	public AssociativePredicateElements getAssociativePredicateAccess() {
		return pAssociativePredicate;
	}
	
	public ParserRule getAssociativePredicateRule() {
		return getAssociativePredicateAccess().getRule();
	}
	
	//PrimaryPredicate returns Formula:
	//    RelationalPredicate
	//;
	public PrimaryPredicateElements getPrimaryPredicateAccess() {
		return pPrimaryPredicate;
	}
	
	public ParserRule getPrimaryPredicateRule() {
		return getPrimaryPredicateAccess().getRule();
	}
	
	//RelationalPredicate returns Formula:
	//    Expression ({RelationalPredicate.left = current} tag=('=') right=Expression)?
	//;
	public RelationalPredicateElements getRelationalPredicateAccess() {
		return pRelationalPredicate;
	}
	
	public ParserRule getRelationalPredicateRule() {
		return getRelationalPredicateAccess().getRule();
	}
	
	//Expression returns Formula:
	//    AdditionSubtraction
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AdditionSubtraction returns Formula:
	//    (MultiplicationDivision) ({AdditionSubtraction.left=current} tag=('+' | '-') right=(MultiplicationDivision))*
	//;
	public AdditionSubtractionElements getAdditionSubtractionAccess() {
		return pAdditionSubtraction;
	}
	
	public ParserRule getAdditionSubtractionRule() {
		return getAdditionSubtractionAccess().getRule();
	}
	
	//MultiplicationDivision returns Formula:
	//    PrimaryExpression ({MultiplicationDivision.left=current} tag=('*' | '/') right=PrimaryExpression)*
	//;
	public MultiplicationDivisionElements getMultiplicationDivisionAccess() {
		return pMultiplicationDivision;
	}
	
	public ParserRule getMultiplicationDivisionRule() {
		return getMultiplicationDivisionAccess().getRule();
	}
	
	//PrimaryExpression returns Formula:
	//    '(' Formula ')' |
	//    NumberLiteral |
	//    Identifier
	//;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//NumberLiteral:
	//    value=INT
	//;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//Identifier:
	//    name=ID
	//;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
