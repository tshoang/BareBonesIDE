/*
 * generated by Xtext 2.27.0
 */
package ac.soton.java.barebones2.ide.contentassist.antlr;

import ac.soton.java.barebones2.ide.contentassist.antlr.internal.InternalBareBonesParser;
import ac.soton.java.barebones2.services.BareBonesGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BareBonesParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BareBonesGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BareBonesGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getAssociativePredicateAccess().getTagAlternatives_1_1_0(), "rule__AssociativePredicate__TagAlternatives_1_1_0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getTagAlternatives_1_1_0(), "rule__AdditionSubtraction__TagAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getTagAlternatives_1_1_0(), "rule__MultiplicationDivision__TagAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getClearAccess().getGroup(), "rule__Clear__Group__0");
			builder.put(grammarAccess.getIncrementAccess().getGroup(), "rule__Increment__Group__0");
			builder.put(grammarAccess.getDecrementAccess().getGroup(), "rule__Decrement__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getOutVariableAccess().getGroup(), "rule__OutVariable__Group__0");
			builder.put(grammarAccess.getOutStringAccess().getGroup(), "rule__OutString__Group__0");
			builder.put(grammarAccess.getInAccess().getGroup(), "rule__In__Group__0");
			builder.put(grammarAccess.getAssociativePredicateAccess().getGroup(), "rule__AssociativePredicate__Group__0");
			builder.put(grammarAccess.getAssociativePredicateAccess().getGroup_1(), "rule__AssociativePredicate__Group_1__0");
			builder.put(grammarAccess.getRelationalPredicateAccess().getGroup(), "rule__RelationalPredicate__Group__0");
			builder.put(grammarAccess.getRelationalPredicateAccess().getGroup_1(), "rule__RelationalPredicate__Group_1__0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getGroup(), "rule__AdditionSubtraction__Group__0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getGroup_1(), "rule__AdditionSubtraction__Group_1__0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getGroup(), "rule__MultiplicationDivision__Group__0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getGroup_1(), "rule__MultiplicationDivision__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
			builder.put(grammarAccess.getProgramAccess().getStatementsAssignment(), "rule__Program__StatementsAssignment");
			builder.put(grammarAccess.getClearAccess().getNameAssignment_2(), "rule__Clear__NameAssignment_2");
			builder.put(grammarAccess.getIncrementAccess().getNameAssignment_2(), "rule__Increment__NameAssignment_2");
			builder.put(grammarAccess.getDecrementAccess().getNameAssignment_2(), "rule__Decrement__NameAssignment_2");
			builder.put(grammarAccess.getWhileAccess().getConditionAssignment_2(), "rule__While__ConditionAssignment_2");
			builder.put(grammarAccess.getWhileAccess().getStatementsAssignment_4(), "rule__While__StatementsAssignment_4");
			builder.put(grammarAccess.getOutVariableAccess().getFormulaAssignment_2(), "rule__OutVariable__FormulaAssignment_2");
			builder.put(grammarAccess.getOutStringAccess().getNameAssignment_2(), "rule__OutString__NameAssignment_2");
			builder.put(grammarAccess.getInAccess().getNameAssignment_2(), "rule__In__NameAssignment_2");
			builder.put(grammarAccess.getAssociativePredicateAccess().getTagAssignment_1_1(), "rule__AssociativePredicate__TagAssignment_1_1");
			builder.put(grammarAccess.getAssociativePredicateAccess().getRightAssignment_1_2(), "rule__AssociativePredicate__RightAssignment_1_2");
			builder.put(grammarAccess.getRelationalPredicateAccess().getTagAssignment_1_1(), "rule__RelationalPredicate__TagAssignment_1_1");
			builder.put(grammarAccess.getRelationalPredicateAccess().getRightAssignment_1_2(), "rule__RelationalPredicate__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getTagAssignment_1_1(), "rule__AdditionSubtraction__TagAssignment_1_1");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getRightAssignment_1_2(), "rule__AdditionSubtraction__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getTagAssignment_1_1(), "rule__MultiplicationDivision__TagAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getRightAssignment_1_2(), "rule__MultiplicationDivision__RightAssignment_1_2");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
			builder.put(grammarAccess.getIdentifierAccess().getNameAssignment(), "rule__Identifier__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BareBonesGrammarAccess grammarAccess;

	@Override
	protected InternalBareBonesParser createParser() {
		InternalBareBonesParser result = new InternalBareBonesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BareBonesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BareBonesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
