/*
 * generated by Xtext 2.27.0
 */
grammar InternalBareBones;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ac.soton.java.barebones2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ac.soton.java.barebones2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ac.soton.java.barebones2.services.BareBonesGrammarAccess;

}
@parser::members {
	private BareBonesGrammarAccess grammarAccess;

	public void setGrammarAccess(BareBonesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
			(rule__Program__StatementsAssignment)
			{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
			(rule__Program__StatementsAssignment)*
			{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClear
entryRuleClear
:
{ before(grammarAccess.getClearRule()); }
	 ruleClear
{ after(grammarAccess.getClearRule()); } 
	 EOF 
;

// Rule Clear
ruleClear 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClearAccess().getGroup()); }
		(rule__Clear__Group__0)
		{ after(grammarAccess.getClearAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIncrement
entryRuleIncrement
:
{ before(grammarAccess.getIncrementRule()); }
	 ruleIncrement
{ after(grammarAccess.getIncrementRule()); } 
	 EOF 
;

// Rule Increment
ruleIncrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncrementAccess().getGroup()); }
		(rule__Increment__Group__0)
		{ after(grammarAccess.getIncrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecrement
entryRuleDecrement
:
{ before(grammarAccess.getDecrementRule()); }
	 ruleDecrement
{ after(grammarAccess.getDecrementRule()); } 
	 EOF 
;

// Rule Decrement
ruleDecrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecrementAccess().getGroup()); }
		(rule__Decrement__Group__0)
		{ after(grammarAccess.getDecrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutVariable
entryRuleOutVariable
:
{ before(grammarAccess.getOutVariableRule()); }
	 ruleOutVariable
{ after(grammarAccess.getOutVariableRule()); } 
	 EOF 
;

// Rule OutVariable
ruleOutVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutVariableAccess().getGroup()); }
		(rule__OutVariable__Group__0)
		{ after(grammarAccess.getOutVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutString
entryRuleOutString
:
{ before(grammarAccess.getOutStringRule()); }
	 ruleOutString
{ after(grammarAccess.getOutStringRule()); } 
	 EOF 
;

// Rule OutString
ruleOutString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutStringAccess().getGroup()); }
		(rule__OutString__Group__0)
		{ after(grammarAccess.getOutStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIn
entryRuleIn
:
{ before(grammarAccess.getInRule()); }
	 ruleIn
{ after(grammarAccess.getInRule()); } 
	 EOF 
;

// Rule In
ruleIn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInAccess().getGroup()); }
		(rule__In__Group__0)
		{ after(grammarAccess.getInAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormula
entryRuleFormula
:
{ before(grammarAccess.getFormulaRule()); }
	 ruleFormula
{ after(grammarAccess.getFormulaRule()); } 
	 EOF 
;

// Rule Formula
ruleFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormulaAccess().getPredicateParserRuleCall()); }
		rulePredicate
		{ after(grammarAccess.getFormulaAccess().getPredicateParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getAssociativePredicateParserRuleCall()); }
		ruleAssociativePredicate
		{ after(grammarAccess.getPredicateAccess().getAssociativePredicateParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssociativePredicate
entryRuleAssociativePredicate
:
{ before(grammarAccess.getAssociativePredicateRule()); }
	 ruleAssociativePredicate
{ after(grammarAccess.getAssociativePredicateRule()); } 
	 EOF 
;

// Rule AssociativePredicate
ruleAssociativePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssociativePredicateAccess().getGroup()); }
		(rule__AssociativePredicate__Group__0)
		{ after(grammarAccess.getAssociativePredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryPredicate
entryRulePrimaryPredicate
:
{ before(grammarAccess.getPrimaryPredicateRule()); }
	 rulePrimaryPredicate
{ after(grammarAccess.getPrimaryPredicateRule()); } 
	 EOF 
;

// Rule PrimaryPredicate
rulePrimaryPredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryPredicateAccess().getRelationalPredicateParserRuleCall()); }
		ruleRelationalPredicate
		{ after(grammarAccess.getPrimaryPredicateAccess().getRelationalPredicateParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalPredicate
entryRuleRelationalPredicate
:
{ before(grammarAccess.getRelationalPredicateRule()); }
	 ruleRelationalPredicate
{ after(grammarAccess.getRelationalPredicateRule()); } 
	 EOF 
;

// Rule RelationalPredicate
ruleRelationalPredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalPredicateAccess().getGroup()); }
		(rule__RelationalPredicate__Group__0)
		{ after(grammarAccess.getRelationalPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAdditionSubtractionParserRuleCall()); }
		ruleAdditionSubtraction
		{ after(grammarAccess.getExpressionAccess().getAdditionSubtractionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditionSubtraction
entryRuleAdditionSubtraction
:
{ before(grammarAccess.getAdditionSubtractionRule()); }
	 ruleAdditionSubtraction
{ after(grammarAccess.getAdditionSubtractionRule()); } 
	 EOF 
;

// Rule AdditionSubtraction
ruleAdditionSubtraction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getGroup()); }
		(rule__AdditionSubtraction__Group__0)
		{ after(grammarAccess.getAdditionSubtractionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicationDivision
entryRuleMultiplicationDivision
:
{ before(grammarAccess.getMultiplicationDivisionRule()); }
	 ruleMultiplicationDivision
{ after(grammarAccess.getMultiplicationDivisionRule()); } 
	 EOF 
;

// Rule MultiplicationDivision
ruleMultiplicationDivision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationDivisionAccess().getGroup()); }
		(rule__MultiplicationDivision__Group__0)
		{ after(grammarAccess.getMultiplicationDivisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getNameAssignment()); }
		(rule__Identifier__NameAssignment)
		{ after(grammarAccess.getIdentifierAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getClearParserRuleCall_0()); }
		ruleClear
		{ after(grammarAccess.getStatementAccess().getClearParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIncrementParserRuleCall_1()); }
		ruleIncrement
		{ after(grammarAccess.getStatementAccess().getIncrementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDecrementParserRuleCall_2()); }
		ruleDecrement
		{ after(grammarAccess.getStatementAccess().getDecrementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileParserRuleCall_3()); }
		ruleWhile
		{ after(grammarAccess.getStatementAccess().getWhileParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getOutVariableParserRuleCall_4()); }
		ruleOutVariable
		{ after(grammarAccess.getStatementAccess().getOutVariableParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getOutStringParserRuleCall_5()); }
		ruleOutString
		{ after(grammarAccess.getStatementAccess().getOutStringParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getInParserRuleCall_6()); }
		ruleIn
		{ after(grammarAccess.getStatementAccess().getInParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__TagAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociativePredicateAccess().getTagAmpersandAmpersandKeyword_1_1_0_0()); }
		'&&'
		{ after(grammarAccess.getAssociativePredicateAccess().getTagAmpersandAmpersandKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssociativePredicateAccess().getTagVerticalLineVerticalLineKeyword_1_1_0_1()); }
		'||'
		{ after(grammarAccess.getAssociativePredicateAccess().getTagVerticalLineVerticalLineKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__TagAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getTagPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionSubtractionAccess().getTagPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getTagHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionSubtractionAccess().getTagHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__TagAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationDivisionAccess().getTagAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationDivisionAccess().getTagAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationDivisionAccess().getTagSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationDivisionAccess().getTagSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralParserRuleCall_1()); }
		ruleNumberLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_2()); }
		ruleIdentifier
		{ after(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__0__Impl
	rule__Clear__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getClearAction_0()); }
	()
	{ after(grammarAccess.getClearAccess().getClearAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__1__Impl
	rule__Clear__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getClearKeyword_1()); }
	'clear'
	{ after(grammarAccess.getClearAccess().getClearKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getNameAssignment_2()); }
	(rule__Clear__NameAssignment_2)
	{ after(grammarAccess.getClearAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Increment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__0__Impl
	rule__Increment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getIncrementAction_0()); }
	()
	{ after(grammarAccess.getIncrementAccess().getIncrementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__1__Impl
	rule__Increment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getIncrKeyword_1()); }
	'incr'
	{ after(grammarAccess.getIncrementAccess().getIncrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getNameAssignment_2()); }
	(rule__Increment__NameAssignment_2)
	{ after(grammarAccess.getIncrementAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decrement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__0__Impl
	rule__Decrement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getDecrementAction_0()); }
	()
	{ after(grammarAccess.getDecrementAccess().getDecrementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__1__Impl
	rule__Decrement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getDecrKeyword_1()); }
	'decr'
	{ after(grammarAccess.getDecrementAccess().getDecrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getNameAssignment_2()); }
	(rule__Decrement__NameAssignment_2)
	{ after(grammarAccess.getDecrementAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileAction_0()); }
	()
	{ after(grammarAccess.getWhileAccess().getWhileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_1()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getConditionAssignment_2()); }
	(rule__While__ConditionAssignment_2)
	{ after(grammarAccess.getWhileAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getDoKeyword_3()); }
	'do'
	{ after(grammarAccess.getWhileAccess().getDoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWhileAccess().getStatementsAssignment_4()); }
		(rule__While__StatementsAssignment_4)
		{ after(grammarAccess.getWhileAccess().getStatementsAssignment_4()); }
	)
	(
		{ before(grammarAccess.getWhileAccess().getStatementsAssignment_4()); }
		(rule__While__StatementsAssignment_4)*
		{ after(grammarAccess.getWhileAccess().getStatementsAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getWhileAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutVariable__Group__0__Impl
	rule__OutVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutVariableAccess().getOutVariableAction_0()); }
	()
	{ after(grammarAccess.getOutVariableAccess().getOutVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutVariable__Group__1__Impl
	rule__OutVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutVariableAccess().getOutKeyword_1()); }
	'out'
	{ after(grammarAccess.getOutVariableAccess().getOutKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutVariable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutVariableAccess().getFormulaAssignment_2()); }
	(rule__OutVariable__FormulaAssignment_2)
	{ after(grammarAccess.getOutVariableAccess().getFormulaAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutString__Group__0__Impl
	rule__OutString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutStringAccess().getOutStringAction_0()); }
	()
	{ after(grammarAccess.getOutStringAccess().getOutStringAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutString__Group__1__Impl
	rule__OutString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutStringAccess().getOutKeyword_1()); }
	'out'
	{ after(grammarAccess.getOutStringAccess().getOutKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutString__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutString__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutString__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutStringAccess().getNameAssignment_2()); }
	(rule__OutString__NameAssignment_2)
	{ after(grammarAccess.getOutStringAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__In__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__In__Group__0__Impl
	rule__In__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__In__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInAccess().getInAction_0()); }
	()
	{ after(grammarAccess.getInAccess().getInAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__In__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__In__Group__1__Impl
	rule__In__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__In__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInAccess().getInKeyword_1()); }
	'in'
	{ after(grammarAccess.getInAccess().getInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__In__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__In__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__In__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInAccess().getNameAssignment_2()); }
	(rule__In__NameAssignment_2)
	{ after(grammarAccess.getInAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociativePredicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociativePredicate__Group__0__Impl
	rule__AssociativePredicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociativePredicateAccess().getPrimaryPredicateParserRuleCall_0()); }
	rulePrimaryPredicate
	{ after(grammarAccess.getAssociativePredicateAccess().getPrimaryPredicateParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociativePredicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociativePredicateAccess().getGroup_1()); }
	(rule__AssociativePredicate__Group_1__0)*
	{ after(grammarAccess.getAssociativePredicateAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociativePredicate__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociativePredicate__Group_1__0__Impl
	rule__AssociativePredicate__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociativePredicateAccess().getAssociativePredicateLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAssociativePredicateAccess().getAssociativePredicateLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociativePredicate__Group_1__1__Impl
	rule__AssociativePredicate__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociativePredicateAccess().getTagAssignment_1_1()); }
	(rule__AssociativePredicate__TagAssignment_1_1)
	{ after(grammarAccess.getAssociativePredicateAccess().getTagAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociativePredicate__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociativePredicateAccess().getRightAssignment_1_2()); }
	(rule__AssociativePredicate__RightAssignment_1_2)
	{ after(grammarAccess.getAssociativePredicateAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalPredicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalPredicate__Group__0__Impl
	rule__RelationalPredicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalPredicateAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
	{ after(grammarAccess.getRelationalPredicateAccess().getExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalPredicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalPredicateAccess().getGroup_1()); }
	(rule__RelationalPredicate__Group_1__0)?
	{ after(grammarAccess.getRelationalPredicateAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalPredicate__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalPredicate__Group_1__0__Impl
	rule__RelationalPredicate__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalPredicateAccess().getRelationalPredicateLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRelationalPredicateAccess().getRelationalPredicateLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalPredicate__Group_1__1__Impl
	rule__RelationalPredicate__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalPredicateAccess().getTagAssignment_1_1()); }
	(rule__RelationalPredicate__TagAssignment_1_1)
	{ after(grammarAccess.getRelationalPredicateAccess().getTagAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalPredicate__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalPredicateAccess().getRightAssignment_1_2()); }
	(rule__RelationalPredicate__RightAssignment_1_2)
	{ after(grammarAccess.getRelationalPredicateAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionSubtraction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group__0__Impl
	rule__AdditionSubtraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getMultiplicationDivisionParserRuleCall_0()); }
	ruleMultiplicationDivision
	{ after(grammarAccess.getAdditionSubtractionAccess().getMultiplicationDivisionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getGroup_1()); }
	(rule__AdditionSubtraction__Group_1__0)*
	{ after(grammarAccess.getAdditionSubtractionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionSubtraction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group_1__0__Impl
	rule__AdditionSubtraction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getAdditionSubtractionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionSubtractionAccess().getAdditionSubtractionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group_1__1__Impl
	rule__AdditionSubtraction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getTagAssignment_1_1()); }
	(rule__AdditionSubtraction__TagAssignment_1_1)
	{ after(grammarAccess.getAdditionSubtractionAccess().getTagAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionSubtraction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionSubtractionAccess().getRightAssignment_1_2()); }
	(rule__AdditionSubtraction__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionSubtractionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationDivision__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivision__Group__0__Impl
	rule__MultiplicationDivision__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getMultiplicationDivisionAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivision__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionAccess().getGroup_1()); }
	(rule__MultiplicationDivision__Group_1__0)*
	{ after(grammarAccess.getMultiplicationDivisionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationDivision__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivision__Group_1__0__Impl
	rule__MultiplicationDivision__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionAccess().getMultiplicationDivisionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationDivisionAccess().getMultiplicationDivisionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivision__Group_1__1__Impl
	rule__MultiplicationDivision__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionAccess().getTagAssignment_1_1()); }
	(rule__MultiplicationDivision__TagAssignment_1_1)
	{ after(grammarAccess.getMultiplicationDivisionAccess().getTagAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationDivision__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationDivisionAccess().getRightAssignment_1_2()); }
	(rule__MultiplicationDivision__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationDivisionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getFormulaParserRuleCall_0_1()); }
	ruleFormula
	{ after(grammarAccess.getPrimaryExpressionAccess().getFormulaParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClearAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getClearAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncrementAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getIncrementAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecrementAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDecrementAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getConditionFormulaParserRuleCall_2_0()); }
		ruleFormula
		{ after(grammarAccess.getWhileAccess().getConditionFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__StatementsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getStatementsStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileAccess().getStatementsStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutVariable__FormulaAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutVariableAccess().getFormulaFormulaParserRuleCall_2_0()); }
		ruleFormula
		{ after(grammarAccess.getOutVariableAccess().getFormulaFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutString__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutStringAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getOutStringAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__In__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getInAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__TagAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociativePredicateAccess().getTagAlternatives_1_1_0()); }
		(rule__AssociativePredicate__TagAlternatives_1_1_0)
		{ after(grammarAccess.getAssociativePredicateAccess().getTagAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociativePredicate__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociativePredicateAccess().getRightPrimaryPredicateParserRuleCall_1_2_0()); }
		rulePrimaryPredicate
		{ after(grammarAccess.getAssociativePredicateAccess().getRightPrimaryPredicateParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__TagAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalPredicateAccess().getTagEqualsSignKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRelationalPredicateAccess().getTagEqualsSignKeyword_1_1_0()); }
			'='
			{ after(grammarAccess.getRelationalPredicateAccess().getTagEqualsSignKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRelationalPredicateAccess().getTagEqualsSignKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalPredicate__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalPredicateAccess().getRightExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getRelationalPredicateAccess().getRightExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__TagAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getTagAlternatives_1_1_0()); }
		(rule__AdditionSubtraction__TagAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionSubtractionAccess().getTagAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionSubtraction__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionSubtractionAccess().getRightMultiplicationDivisionParserRuleCall_1_2_0()); }
		ruleMultiplicationDivision
		{ after(grammarAccess.getAdditionSubtractionAccess().getRightMultiplicationDivisionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__TagAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationDivisionAccess().getTagAlternatives_1_1_0()); }
		(rule__MultiplicationDivision__TagAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationDivisionAccess().getTagAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationDivision__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getMultiplicationDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberLiteralAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
